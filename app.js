const S={};

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
function setSpin(v){
  S.spin.style.display=v?"inline-flex":"none";
  S.btnRandom.disabled=v; S.btnSent.disabled=v; S.btnNouns.disabled=v;
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ–±–ª–∞—Å—Ç—å –æ—à–∏–±–æ–∫
function setErr(t){
  if(!t){ S.err.style.display="none"; S.err.textContent=""; return; }
  S.err.style.display="block"; S.err.textContent=t;
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –º–∞–ø–ø–∏–Ω–≥ –º–µ—Ç–∫–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Üí –∏–∫–æ–Ω–∫–∞/–∫–ª–∞—Å—Å/–∏–∫–æ–Ω–∫–∞-fontawesome
function mapSentIcon(lbl){
  if(lbl==="positive")return["üëç","good","fa-regular fa-face-smile"];
  if(lbl==="negative")return["üëé","bad","fa-regular fa-face-frown"];
  if(lbl==="neutral") return["‚ùì","warn","fa-regular fa-face-meh"];
  return["‚ùì","warn","fa-regular fa-face-meh"];
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –º–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö ‚Üí –∏–∫–æ–Ω–∫–∞/–∫–ª–∞—Å—Å
function mapNounIcon(lbl){
  if(lbl==="high"||lbl==="many")return["üü¢","good"];
  if(lbl==="medium")return["üü°","warn"];
  if(lbl==="low"||lbl==="few")return["üî¥","bad"];
  return["‚Äî","warn"];
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –±–µ—Ä—ë—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ç—Ä–∏–º–º–∏—Ç
function firstLineLower(t){ return (t||"").split(/\r?\n/)[0].toLowerCase().trim(); }

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –∫ positive/negative/neutral
function normalizeResp(raw){
  let s=firstLineLower(raw).replace(/^[^a-z–∞-—è—ë]+/i,"");
  if(/positive|positif|–ø–æ–ª–æ–∂–∏—Ç|—Ö–æ—Ä–æ—à|good/.test(s))return"positive";
  if(/negative|negatif|–æ—Ç—Ä–∏—Ü–∞—Ç|–ø–ª–æ—Ö|bad/.test(s))return"negative";
  if(/neutral|–Ω–µ–π—Ç—Ä/.test(s))return"neutral";
  return s;
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å many/high/medium/low –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
function normalizeLevel(raw){
  let s=firstLineLower(raw);
  if(/\b(high|many|>?\s*15|\bmore than 15\b|–±–æ–ª–µ–µ\s*15|–º–Ω–æ–≥–æ)\b/.test(s))return"high";
  if(/\b(medium|6-15|6 to 15|—Å—Ä–µ–¥–Ω|–æ—Ç\s*6\s*–¥–æ\s*15)\b/.test(s))return"medium";
  if(/\b(low|few|<\s*6|–º–∞–ª–æ|–º–µ–Ω–µ–µ\s*6)\b/.test(s))return"low";
  return s;
}

/* ===================== HF –º–æ–¥–µ–ª–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===================== */
// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ (–∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
const TEXTGEN_MODELS=[
  "HuggingFaceH4/smol-llama-3.2-1.7B-instruct",
  "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
];
// ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–¥ –∑–∞–¥–∞—á–∏ (—á–∞—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–¥–∞—é—Ç –æ—Ç–≤–µ—Ç)
const SENTIMENT_MODEL="cardiffnlp/twitter-xlm-roberta-base-sentiment"; // multi-lang, –¥–∞—ë—Ç negative/neutral/positive
const POS_MODELS=[
  "vblagoje/bert-english-uncased-finetuned-pos",
  "vblagoje/bert-english-cased-finetuned-pos"
];

let ACTIVE_TEXTGEN_MODEL=TEXTGEN_MODELS[0];
let ACTIVE_SENT_MODEL=SENTIMENT_MODEL;
let ACTIVE_POS_MODEL=POS_MODELS[0];

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∏–Ω–ø—É—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –∏–ª–∏ null
function getAuthHeader(){
  const el=S.token;
  const tok=el && el.value ? el.value.trim().replace(/[\s\r\n\t]+/g,"") : "";
  return tok ? ("Bearer "+tok) : null;
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –æ–±—â–∏–π POST –∫ HF Inference API
async function hfRequest(modelId, body){
  const url=`https://api-inference.huggingface.co/models/${modelId}`;
  const headers={
    "Accept":"application/json",
    "Content-Type":"application/json"
  };
  const auth=getAuthHeader();
  if(auth) headers["Authorization"]=auth;

  const r=await fetch(url,{method:"POST",mode:"cors",cache:"no-store",headers,body:JSON.stringify(body)});
  if(r.status===401) throw new Error("401 Unauthorized (—É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π HF —Ç–æ–∫–µ–Ω hf_‚Ä¶ —Å –ø—Ä–∞–≤–æ–º Read)");
  if(r.status===402) throw new Error("402 Payment required");
  if(r.status===429) throw new Error("429 Rate limited");
  if(r.status===404||r.status===403) throw new Error(`Model ${modelId} unavailable (${r.status})`);
  if(!r.ok){ const e=await r.text(); throw new Error(`API error ${r.status}: ${e.slice(0,200)}`); }
  return r.json();
}

/* ===================== –í—ã–∑–æ–≤—ã HF –ø–æ –∑–∞–¥–∞—á–∞–º ===================== */

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ text-classification (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
async function callSentimentHF(text){
  const data=await hfRequest(SENTIMENT_MODEL,{inputs:text, options:{wait_for_model:true,use_cache:false}});
  // –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ [{label,score},‚Ä¶], –ª–∏–±–æ [[{‚Ä¶}]]
  const arr=Array.isArray(data)&&Array.isArray(data[0]) ? data[0] : (Array.isArray(data)?data:[]);
  // –ü—Ä–∏–≤–æ–¥–∏–º –º–µ—Ç–∫–∏ –∫ –Ω–∞—à–∏–º positive/neutral/negative
  // cardiffnlp –æ–±—ã—á–Ω–æ –æ—Ç–¥–∞—ë—Ç "positive"/"neutral"/"negative" —É–∂–µ –≤ label
  let best=arr.reduce((a,b)=> (a&&a.score>b.score)?a:b, null) || arr[0];
  if(!best) throw new Error("Empty response from sentiment model");
  const lbl=best.label.toLowerCase();
  if(/pos/.test(lbl)) return "positive";
  if(/neu/.test(lbl)) return "neutral";
  if(/neg/.test(lbl)) return "negative";
  // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é
  return await callTextGenHF(
    "Classify this review as positive, negative, or neutral. Return only one word.",
    text
  ).then(normalizeResp);
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: POS-—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ token-classification; —Å—á–∏—Ç–∞–µ—Ç NOUN+PROPN –∏ –º–∞–ø–ø–∏—Ç –≤ high/medium/low
async function callNounsPOSHF(text){
  let lastErr=null;
  for(const m of POS_MODELS){
    try{
      const data=await hfRequest(m,{inputs:text, options:{wait_for_model:true,use_cache:false}});
      // –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: [{entity_group, word, score, start, end}, ‚Ä¶] –∏–ª–∏ [[‚Ä¶]]
      const flat=Array.isArray(data)&&Array.isArray(data[0]) ? data[0] : (Array.isArray(data)?data:[]);
      if(!flat.length) throw new Error("Empty POS response");
      let count=0;
      for(const tok of flat){
        const tag=(tok.entity_group||tok.entity||"").toUpperCase();
        if(tag.includes("NOUN")||tag.includes("PROPN")||tag==="NN"||tag==="NNS"||tag==="NNP"||tag==="NNPS"){
          count++;
        }
      }
      ACTIVE_POS_MODEL=m;
      return count>15?"high":count>=6?"medium":"low";
    }catch(e){ lastErr=e; }
  }
  // –ï—Å–ª–∏ POS-–º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤—ã–≤–∞–µ–º—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é (–ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É HF)
  const out=await callTextGenHF(
    "Count the nouns in this review and return only High (>15), Medium (6-15), or Low (<6). Return only one of: High, Medium, Low.",
    text
  );
  return normalizeLevel(out);
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å)
async function callTextGenHF(prompt,text){
  let lastErr=null;
  for(const m of TEXTGEN_MODELS){
    try{
      const data=await hfRequest(m,{
        inputs:`${prompt}\n\nTEXT:\n${text}\n\nANSWER:`,
        parameters:{ max_new_tokens:32, temperature:0, return_full_text:false },
        options:{ wait_for_model:true, use_cache:false }
      });
      const txt=Array.isArray(data)&&data[0]?.generated_text
        ? data[0].generated_text
        : (data?.generated_text ?? (typeof data==="string"?data:JSON.stringify(data)));
      ACTIVE_TEXTGEN_MODEL=m;
      return txt;
    }catch(e){ lastErr=e; }
  }
  throw lastErr||new Error("All text-generation models unavailable");
}

/* ===================== UI Actions (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ HF) ===================== */

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∑—ã–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–µ—Ç–∫–∏
function rand(){
  if(!S.reviews.length){ setErr("No reviews loaded."); return; }
  const i=Math.floor(Math.random()*S.reviews.length);
  S.textEl.textContent=S.reviews[i].text||"";
  S.sent.querySelector("span").textContent="Sentiment: ‚Äî";
  S.sent.className="pill";
  S.sent.querySelector("i").className="fa-regular fa-face-meh";
  S.nouns.querySelector("span").textContent="Noun level: ‚Äî";
  S.nouns.className="pill";
  setErr("");
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: —Ç–æ–ª—å–∫–æ HF ‚Äî sentiment —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å; –µ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å
async function onSent(){
  const txt=S.textEl.textContent.trim();
  if(!txt){ setErr("Select a review first."); return; }
  setErr(""); setSpin(true);
  try{
    const lbl=await callSentimentHF(txt);
    const [ico,cls,face]=mapSentIcon(lbl);
    S.sent.querySelector("span").textContent="Sentiment: "+ico;
    S.sent.className="pill "+cls;
    S.sent.querySelector("i").className=face;
    S.sent.title=`model: ${ACTIVE_SENT_MODEL||ACTIVE_TEXTGEN_MODEL}`;
  }catch(e){
    setErr(e.message);
  } finally{
    setSpin(false);
  }
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: —Ç–æ–ª—å–∫–æ HF ‚Äî nouns —á–µ—Ä–µ–∑ POS-–º–æ–¥–µ–ª—å; –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—É—é HF-–º–æ–¥–µ–ª—å
async function onNouns(){
  const txt=S.textEl.textContent.trim();
  if(!txt){ setErr("Select a review first."); return; }
  setErr(""); setSpin(true);
  try{
    const lvl=await callNounsPOSHF(txt);
    const [ico,cls]=mapNounIcon(lvl);
    S.nouns.querySelector("span").textContent="Noun level: "+ico;
    S.nouns.className="pill "+cls;
    S.nouns.title=`model: ${ACTIVE_POS_MODEL||ACTIVE_TEXTGEN_MODEL}`;
  }catch(e){
    setErr(e.message);
  } finally{
    setSpin(false);
  }
}

/* ===================== TSV loading (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===================== */
function fetchTSV(url){
  return new Promise((res,rej)=>{
    if(typeof Papa==="undefined"){ rej(new Error("Papa Parse not loaded")); return; }
    Papa.parse(url,{
      download:true, delimiter:"\t", header:true, skipEmptyLines:true,
      complete:r=>{ const rows=(r.data||[]).filter(x=>x&&x.text); res(rows); },
      error:e=>rej(e)
    });
  });
}
async function loadTSV(){
  const candidates=["./reviews_test.tsv","./reviews_test (1).tsv","./reviews_test%20(1).tsv"];
  for(const c of candidates){
    try{ const rows=await fetchTSV(c); if(rows.length) return rows; }catch(_){}
  }
  throw new Error("TSV not found");
}

/* ===================== Init ===================== */
// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ DOM, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö; –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç id "token" –∏ "tokenInput"
function init(){
  S.reviews=[];
  S.textEl=document.getElementById("text");
  S.err=document.getElementById("err");
  S.spin=document.getElementById("spin");
  S.btnRandom=document.getElementById("btnRandom");
  S.btnSent=document.getElementById("btnSent");
  S.btnNouns=document.getElementById("btnNouns");
  S.token=document.getElementById("token")||document.getElementById("tokenInput");
  S.sent=document.getElementById("sent");
  S.nouns=document.getElementById("nouns");

  S.btnRandom.addEventListener("click",rand);
  S.btnSent.addEventListener("click",onSent);
  S.btnNouns.addEventListener("click",onNouns);

  (async()=>{ try{ S.reviews=await loadTSV(); rand(); } catch(e){ setErr("Failed to load TSV: "+e.message); } })();
}

// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: –≤—ã–∑—ã–≤–∞–µ—Ç init –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if(document.readyState==="loading"){ document.addEventListener("DOMContentLoaded",init); } else { init(); }
